#include <iostream>

using namespace std;

typedef string Texto;
typedef unsigned Dado;

class noh () { 
	
	private:
		noh *proximo;
		noh *anterior;
		Dado numeroMatricula;
		Texto nomeAluno;
		
	public:
		noh (Dado x, Texto y);
		
}

noh :: noh(Dado x, Texto y) : numeroMatricula(x) : nomeAluno(y) {
	proximo = NULL;
	anterior = NULL;
}

class lista() { 
	
	private:
		noh *primeiro;
		noh *ultimo;
		unsigned tamanho;
	
	public:
		lista();
		void insereComeco(Dado numeroMatricula, Texto nomeAluno);
		void lista::buscaPosicao (Dado valor);
		unsigned lista::buscaPosicao (Dado valor);
		void lista::remover (Dado posicao);
		void lista::imprime ();
}

lista :: lista(){
	primeiro = NULL;
	ultimo = NULL;
	tamanho = 0;
}

void lista::insereComeco (Dado numeroMatricula, Texto nomeAluno){
	
	noh *novo = new noh (numeroMatricula,nomeAluno);
	novo->proximo = primeiro;
	primeiro = novo;
	if ( tamanho == 0 ) 
		ultimo = novo;
	
	tamanho++;

}
Dado lista::buscaPosicao (Dado valor){

	noh *aux = primeiro;
	int contador=0;
	while (aux->numeroMatricula != valor){
		aux = aux->proximo;
		contador++;
	}
	return contador;

void lista::remover (Dado posicao) { 	
	
	noh *remover;
	if (posicao == 0) {
		noh *aux = primeiro;
		remover = aux;
		primeiro = aux->proximo;
		aux->proximo->anterior = NULL;
		delete remover;
	}
	else if (posicao == tamanho-1 && tamanho!=0){
		noh *aux = ultimo;
		remover = aux;
		ultimo = aux->anterior;
		aux->anterior->proximo = NULL;
		delete remover;
	}else{
		unsigned posicao = buscaPosicao(posicao);
		for (int i = 0; i < posicao ; i++){
		aux = aux->proximo;
		}
		remover = aux->proximo;
		aux = remover->proximo;
		remover->proximo->anterior = anterior;
	 }
}

void lista::imprime () { 
	
	noh *aux = primeiro;
	while ( primeiro != NULL ) { 
		cout << aux->nomeAluno << " " << aux->numeroMatricula;
		aux = aux->proximo;
		cout << endl;
	}
}
pow(8,2
int main () { 
	
	lista escola;
	string nome;#include <iostream>

using namespace std; 

typedef int dado;

class noh { 
	
    friend class lista;
    
    public:
    
        noh ( dado var );
    
    private:
    
        dado num;
        noh *mProx;
    
};


class lista { 
    
    public:
        
        lista ();
        
        void inserirNoComeco ( dado valor );
        void inserirNoFim (dado valor);
        void imprime ();
            
    
    private:
    
        noh *primeiro;
        noh *ultimo;
        int tamanho;
};

 
    this->num = var;
    this->mProx = NULL;
}

    
void lista :: inserirNoFim (dado valor) { 
    
    noh *novo = new noh (valor);
    
    if ( primeiro == NULL ) {
        primeiro = novo;
        ultimo = novo;
    } else { 
        
        ultimo->mProx = novo;
        ultimo = novo;
    }
    tamanho++;
}

lista :: lista () { 
    
    primeiro = NULL;
    ultimo = NULL;
    tamanho =0;
}

void lista :: imprime () { 
    
    noh *aux = primeiro;
    
    while (aux) { 
        
        cout << aux->mProx << " ";
        aux = aux->mProx;
    }
    
    cout << endl;
}

void lista :: inserirNoComeco (dado valor) {
    
    noh *novo = new noh (valor);
    
    if ( primeiro == NULL ) { 
        primeiro = novo;
        ultimo = novo;
    } else { 
        
        primeiro->mProx = novo;
        primeiro = novo;
    }
}
        

int main () { 


    lista teste;
    
    teste.inserirNoFim (12);
    teste.inserirNoFim(0);
    teste.inserirNoFim (6);
    teste.inserirNoFim (3);
    teste.inserirNoFim(1);
    //teste.inserirNoComeco (90);
    //teste.inserirNoComeco (6);
    
    teste.imprime();
    
    return 0;
}

    


	unsigned matricula;
	
    do {
        cin >> opcao;
        if (opcao == "i") {
			cin >> nome >> matricula;
			
			
            
            if (idLista == 'a')
                listaA.insere(palavra);
            else
                listaB.insere(palavra);
        }
        else if (opcao == "a=b") {
            listaA = listaB;
        }
        else if (opcao == "b=a") {
            listaB = listaA;
        }
        else if (opcao == "s") {
            lista soma = listaA + listaB;
            soma.imprime();
        }
        else if (opcao == "e") {
            cin >> idLista;
            if (idLista == 'a')
                listaA.imprime();
            else
                listaB.imprime();
        }
    } while (opcao != "t");
    return 0;
}
	
	
	
	
	
	
	
	
		
	
